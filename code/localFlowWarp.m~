function [NewLocalWindows] = localFlowWarp(WarpedPrevFrame, CurrentFrame, LocalWindows, Mask, Width)
% LOCALFLOWWARP Calculate local window movement based on optical flow between frames.

% WarpedPrevFrame = out
% CurrentFrame = ingImg
% LocalWindows = windows
% Mask = 
% Width = wSize
% Calculate tform
    opticFlow = opticalFlowHS;
    flow = estimateFlow(opticFlow, rgb2gray(WarpedPrevFrame))
    
    half_wwidth = floor(Width / 2);
    row_disp = half_wwidth;
    col_disp = half_wwidth;
    
    WarpedPrevFrame = padarray(WarpedPrevFrame, [half_wwidth half_wwidth], 0, 'both');
    WarpedPrevFrame_gray = rgb2gray(WarpedPrevFrame);
    Mask = padarray(Mask, [half_wwidth half_wwidth], 0, 'both');
    
    NewLocalWindows = zeros(size(LocalWindows));
    window_count = 1;
    for window_center = LocalWindows'
        % Row and columns displacement required for center of window due to
        % padding
        center = [(window_center(2) + row_disp) (window_center(1) + col_disp)]
        
        % Create window
        window = WarpedPrevFrame_gray(center(1) - half_wwidth:center(1) + half_wwidth, ...
            center(2) - half_wwidth:center(2) + half_wwidth, :);
        % Restrict mask to window's size and location
        window_mask = Mask(center(1) - half_wwidth:center(1) + half_wwidth, ...
            center(2) - half_wwidth:center(2) + half_wwidth, :);
        % Restrict flow to window's size and location
        window_Vx = flow.Vx(center(1) - half_wwidth:center(1) + half_wwidth, ...
            center(2) - half_wwidth:center(2) + half_wwidth);
        window_Vy = flow.Vy(center(1) - half_wwidth:center(1) + half_wwidth, ...
            center(2) - half_wwidth:center(2) + half_wwidth);
        
%         vecs_to_avg = [];
%         for row = 1:Width+1
%             for col = 1:Width+1
%                 if window_mask(row, col) == 1
%                     vecs_to_avg = [vecs_to_avg window_flow(row, col)];
%                 end
%             end
%         end
        in_bounds_Vx = window_Vx .* Mask;
        in_bounds_Vy = window_Vy .* Mask;
        Vx_mean = sum(in_bounds_Vx(:)) / sum(Mask(:)==1);
        Vy_mean = sum(in_bounds_Vy(:)) / sum(Mask(:)==1);
        
        if isnan(Vx_mean) || isnan()
        
        avg_vec = mean(vecs_to_avg);
        new_window_center_pos = window_center' + avg_vec;
        NewLocalWindows(window_count, :) = new_window_center_pos;
    end
end

